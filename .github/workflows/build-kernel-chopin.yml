name: Build Kernel Module

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04

    env:
      PYTHON_VERSION: "3"

    steps:
    - name: Checkout Module Source
      uses: actions/checkout@v4

    - name: Install necessary packages
      shell: bash
      run: |
        apt-get update

        # Set locale
        ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
        export DEBIAN_FRONTEND=noninteractive
        apt-get install tzdata lsb-release -y
        dpkg-reconfigure --frontend noninteractive tzdata

        lsb_release -a
        UBUNTU_VERSION=$(lsb_release -sr)

        # Since we are in a 20.04 container, we can simplify the logic
        apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler wget curl -y
        apt-get install p7zip p7zip-full -y
        if [ "${{ env.PYTHON_VERSION }}" == "3" ]; then
            apt install python2 python3 -y
        elif [ "${{ env.PYTHON_VERSION }}" == "2" ]; then
            apt install python2 -y
            rm -f /usr/bin/python
            ln -s /usr/bin/python2.7 /usr/bin/python
        else
            echo "You need choose a python version."
            false
        fi

    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          kernel_source
          clang
          ~/.ccache
        key: ${{ runner.os }}-kernel-chopin-${{ hashFiles('**/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-kernel-chopin-

    - name: Clone Kernel Source
      if: steps.cache.outputs.cache-hit != 'true'
      run: git clone --depth=1 https://github.com/SMlc666/android_kernel_chopin_android_T -b T kernel_source

    - name: Clone Toolchain
      if: steps.cache.outputs.cache-hit != 'true'
      run: git clone --depth=1 https://gitlab.com/LeCmnGend/proton-clang.git -b clang-13 clang

    - name: Set up Environment
      run: |
        echo "$(pwd)/clang/bin" >> $GITHUB_PATH
        echo "CCACHE_DIR=$(pwd)/.ccache" >> $GITHUB_ENV
        echo "USE_CCACHE=1" >> $GITHUB_ENV
        ccache -M 5G

    - name: Prepare Kernel Source for Module Build
      working-directory: ./kernel_source
      run: |
        # Copy module source into kernel tree
        cp -r ../kernel ./drivers/hack

        # Add module to Kconfig and Makefile
        echo 'source "drivers/hack/Kconfig"' >> drivers/Kconfig
        echo 'obj-$(CONFIG_KERNEL_HACK) += hack/' >> drivers/Makefile

        # Configure the kernel
        export ARCH=arm64
        export SUBARCH=arm64
        make O=out mrproper
        make O=out chopin_user_defconfig

        # Enable the module config
        scripts/config --file out/.config --enable CONFIG_KERNEL_HACK
        
    - name: Build Kernel Module
      working-directory: ./kernel_source
      run: |
        export ARCH=arm64
        export SUBARCH=arm64
        export KBUILD_BUILD_USER="GitHub"
        export KBUILD_BUILD_HOST="Actions"
        
        make -j$(nproc --all) O=out modules_prepare
        
        make -j$(nproc --all) O=out M=drivers/hack \
          CC="ccache clang" \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          LD=ld.lld \
          STRIP=llvm-strip \
          AS=llvm-as \
          AR=llvm-ar \
          NM=llvm-nm \
          OBJCOPY=llvm-objcopy \
          OBJDUMP=llvm-objdump \
          CONFIG_NO_ERROR_ON_MISMATCH=y

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: KernelModule
        path: kernel_source/drivers/hack/my_driver.ko